# -*- coding: utf-8 -*-
"""028.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LbYntrcXXfAEfR2Ic0mpliyncmBuZ3J3
"""

def process_strings(A, B, X, Y):
    # 1. 串聯句子 A 和 B，中間用空白隔開
    C = A + " " + B

    # 2. 將句子 C 中的單字 X 替換成 Y 變成句子 D
    words = C.split()
    for i in range(len(words)):
        # 忽略大小寫差異進行替換
        if words[i].lower() == X.lower() :
            words[i] = Y

    D = " ".join(words)

    # 3. 輸出句子 C 和 D 的各自長度（不包含空白）
    len_C = len(C.replace(" ", ""))
    len_D = len(D.replace(" ", ""))
    print(f"{C}\n{D}\n{len_C} {len_D}")

    # 4. 將句子 D 中單字為 Y 的部分倒著輸出
    reversed_words = [word[::-1] if word.lower() == Y.lower() else word for word in words]
    reversed_D = " ".join(reversed_words)
    print(reversed_D)

    # 5. 計算單字 X 和單字 Y 的字數差異 N
    N = abs(len(X) - len(Y))
    #print(N)
    # 6. 將句子 C 從第 1 個字開始，每隔 N 個輸出
    output_C =[]
    for i in range(0,(len(C)),N):
      if C[i]==" " and C[i+N]==" " :
        c=0
      else:
        output_C.append(C[i])
    output_C = "".join(output_C)
    print(output_C)

A = str(input())
B = str(input())
X = str(input())
Y = str(input())

process_strings(A, B, X, Y)